<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="285pt" height="549pt"
 viewBox="0.00 0.00 284.50 549.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 545)">
<title>%3</title>
<g id="a_graph0"><a xlink:title="EventTracer class hierarchy">
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-545 280.5,-545 280.5,4 -4,4"/>
</a>
</g>
<!-- EventTracer -->
<g id="node1" class="node">
<title>EventTracer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class EventTracer:&#10;Log when a given event expression changes its value">
<polygon fill="none" stroke="#000000" points="21,-.5 21,-64.5 134,-64.5 134,-.5 21,-.5"/>
<text text-anchor="start" x="37" y="-50.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">EventTracer</text>
<polyline fill="none" stroke="#000000" points="21,-41.5 134,-41.5 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="EventTracer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, *, condition: Optional[str] = None, events: List[str] = [], file: &lt;class &#39;TextIO&#39;&gt; = &lt;ipykernel.iostream.OutStream object at 0x10bb35e80&gt;) &#45;&gt; None:&#10;Constructor. `events` is a list of expressions to watch.">
<text text-anchor="start" x="29.5" y="-30" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="do_report(self, frame: frame, event: str, arg: Any) &#45;&gt; bool:&#10;Return True if a line should be shown">
<text text-anchor="start" x="29.5" y="-19" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">do_report()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="events_changed(self, events: List[str], frame: frame) &#45;&gt; bool:&#10;Return True if any of the observed `events` has changed">
<text text-anchor="start" x="29.5" y="-7" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">events_changed()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ConditionalTracer -->
<g id="node2" class="node">
<title>ConditionalTracer</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class ConditionalTracer:&#10;A class for tracing a piece of code. Use as `with Tracer(): block()`">
<polygon fill="none" stroke="#000000" points="9.5,-101.5 9.5,-176.5 145.5,-176.5 145.5,-101.5 9.5,-101.5"/>
<text text-anchor="start" x="17.5" y="-162.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">ConditionalTracer</text>
<polyline fill="none" stroke="#000000" points="9.5,-153.5 145.5,-153.5 "/>
<g id="a_node2_4"><a xlink:href="#" xlink:title="ConditionalTracer">
<g id="a_node2_5"><a xlink:href="#" xlink:title="__init__(self, *, condition: Optional[str] = None, file: &lt;class &#39;TextIO&#39;&gt; = &lt;ipykernel.iostream.OutStream object at 0x10bb35e80&gt;) &#45;&gt; None:&#10;Constructor. Trace all events for which `condition` (a Python expr) holds.">
<text text-anchor="start" x="26.5" y="-142.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node2_6"><a xlink:href="#" xlink:title="do_report(self, frame: frame, event: str, arg: Any) &#45;&gt; Optional[bool]">
<text text-anchor="start" x="26.5" y="-131.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">do_report()</text>
</a>
</g>
<g id="a_node2_7"><a xlink:href="#" xlink:title="eval_in_context(self, expr: str, frame: frame) &#45;&gt; Any">
<text text-anchor="start" x="26.5" y="-119.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">eval_in_context()</text>
</a>
</g>
<g id="a_node2_8"><a xlink:href="#" xlink:title="traceit(self, frame: frame, event: str, arg: Any) &#45;&gt; None:&#10;Tracing function; called at every line. To be overloaded in subclasses.">
<text text-anchor="start" x="26.5" y="-109.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- EventTracer&#45;&gt;ConditionalTracer -->
<g id="edge1" class="edge">
<title>EventTracer&#45;&gt;ConditionalTracer</title>
<path fill="none" stroke="#000000" d="M83.5,-64.7425C83.5,-73.0152 83.5,-82.0934 83.5,-90.9758"/>
<polygon fill="none" stroke="#000000" points="80.0001,-91.253 83.5,-101.253 87.0001,-91.253 80.0001,-91.253"/>
</g>
<!-- Tracer -->
<g id="node3" class="node">
<title>Tracer</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class Tracer:&#10;A class for tracing a piece of code. Use as `with Tracer(): block()`">
<polygon fill="none" stroke="#000000" points="0,-213.5 0,-343.5 155,-343.5 155,-213.5 0,-213.5"/>
<text text-anchor="start" x="56" y="-329.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Tracer</text>
<polyline fill="none" stroke="#000000" points="0,-320.5 155,-320.5 "/>
<g id="a_node3_9"><a xlink:href="#" xlink:title="Tracer">
<g id="a_node3_10"><a xlink:href="#" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Called at begin of `with` block. Turn tracing on.">
<text text-anchor="start" x="14.5" y="-298.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__enter__()</text>
</a>
</g>
<g id="a_node3_11"><a xlink:href="#" xlink:title="__exit__(self, exc_tp: Type, exc_value: BaseException, exc_traceback: traceback) &#45;&gt; Optional[bool]:&#10;Called at end of `with` block. Turn tracing off.&#10;Return `None` if ok, not `None` if internal error.">
<text text-anchor="start" x="8.5" y="-298" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__exit__()</text>
</a>
</g>
<g id="a_node3_12"><a xlink:href="#" xlink:title="__init__(self, file: &lt;class &#39;TextIO&#39;&gt; = &lt;ipykernel.iostream.OutStream object at 0x10bb35e80&gt;) &#45;&gt; None:&#10;Create a new tracer.&#10;If `file` is given, output to `file` instead of stdout.">
<text text-anchor="start" x="8.5" y="-287" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node3_13"><a xlink:href="#" xlink:title="changed_vars(self, new_vars: Dict[str, Any]) &#45;&gt; Dict[str, Any]:&#10;Track changed variables, based on `new_vars` observed.">
<text text-anchor="start" x="8.5" y="-276" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">changed_vars()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="#" xlink:title="print_debugger_status(self, frame: frame, event: str, arg: Any) &#45;&gt; None:&#10;Show current source line and changed vars">
<text text-anchor="start" x="8.5" y="-265" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">print_debugger_status()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="#" xlink:title="_traceit(self, frame: frame, event: str, arg: Any) &#45;&gt; Optional[Callable]:&#10;Internal tracing function.">
<text text-anchor="start" x="8.5" y="-253" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_traceit()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="#" xlink:title="is_internal_error(self, exc_tp: type, exc_value: BaseException, exc_traceback: traceback) &#45;&gt; bool:&#10;Return True if exception was raised from `Tracer` or a subclass.">
<text text-anchor="start" x="8.5" y="-242" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">is_internal_error()</text>
</a>
</g>
<g id="a_node3_17"><a xlink:href="#" xlink:title="log(self, *objects: Any, sep: str = &#39; &#39;, end: str = &#39;\n&#39;, flush: bool = False) &#45;&gt; None:&#10;Like print(), but always sending to file given at initialization,&#10;and always flushing">
<text text-anchor="start" x="8.5" y="-231" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">log()</text>
</a>
</g>
<g id="a_node3_18"><a xlink:href="#" xlink:title="traceit(self, frame: frame, event: str, arg: Any) &#45;&gt; None:&#10;Tracing function; called at every line. To be overloaded in subclasses.">
<text text-anchor="start" x="8.5" y="-221" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ConditionalTracer&#45;&gt;Tracer -->
<g id="edge2" class="edge">
<title>ConditionalTracer&#45;&gt;Tracer</title>
<path fill="none" stroke="#000000" d="M83.5,-176.6831C83.5,-184.9508 83.5,-193.9604 83.5,-203.0427"/>
<polygon fill="none" stroke="#000000" points="80.0001,-203.292 83.5,-213.292 87.0001,-203.292 80.0001,-203.292"/>
</g>
<!-- StackInspector -->
<g id="node4" class="node">
<title>StackInspector</title>
<g id="a_node4"><a xlink:href="StackInspector.ipynb" xlink:title="class StackInspector:&#10;Provide functions to inspect the stack">
<polygon fill="none" stroke="#000000" points="0,-369.5 0,-540.5 167,-540.5 167,-369.5 0,-369.5"/>
<text text-anchor="start" x="32.5" y="-526.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="#000000" points="0,-517.5 167,-517.5 "/>
<g id="a_node4_18"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node4_19"><a xlink:href="StackInspector.ipynb" xlink:title="_generated_function_cache = {}">
<text text-anchor="start" x="8.5" y="-505" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_generated_function_cache</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="#000000" points="0,-498.5 167,-498.5 "/>
<g id="a_node4_20"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node4_21"><a xlink:href="StackInspector.ipynb" xlink:title="caller_frame(self) &#45;&gt; frame:&#10;Return the frame of the caller.">
<text text-anchor="start" x="26.5" y="-486" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_frame()</text>
</a>
</g>
<g id="a_node4_22"><a xlink:href="StackInspector.ipynb" xlink:title="caller_function(self) &#45;&gt; Callable:&#10;Return the calling function">
<text text-anchor="start" x="26.5" y="-475" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_function()</text>
</a>
</g>
<g id="a_node4_23"><a xlink:href="StackInspector.ipynb" xlink:title="caller_globals(self) &#45;&gt; Dict[str, Any]:&#10;Return the globals() environment of the caller.">
<text text-anchor="start" x="26.5" y="-464" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_globals()</text>
</a>
</g>
<g id="a_node4_24"><a xlink:href="StackInspector.ipynb" xlink:title="caller_locals(self) &#45;&gt; Dict[str, Any]:&#10;Return the locals() environment of the caller.">
<text text-anchor="start" x="26.5" y="-453" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_locals()</text>
</a>
</g>
<g id="a_node4_25"><a xlink:href="StackInspector.ipynb" xlink:title="caller_location(self) &#45;&gt; Tuple[Callable, int]:&#10;Return the location (func, lineno) of the caller.">
<text text-anchor="start" x="26.5" y="-442" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_location()</text>
</a>
</g>
<g id="a_node4_26"><a xlink:href="StackInspector.ipynb" xlink:title="create_function(self, frame:frame) &#45;&gt; Callable:&#10;Create function for given frame">
<text text-anchor="start" x="26.5" y="-431" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">create_function()</text>
</a>
</g>
<g id="a_node4_27"><a xlink:href="StackInspector.ipynb" xlink:title="is_internal_error(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; bool:&#10;Return True if exception was raised from `StackInspector` or a subclass.">
<text text-anchor="start" x="26.5" y="-420" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">is_internal_error()</text>
</a>
</g>
<g id="a_node4_28"><a xlink:href="StackInspector.ipynb" xlink:title="our_frame(self, frame:frame) &#45;&gt; bool:&#10;Return true if `frame` is in the current (inspecting) class.">
<text text-anchor="start" x="26.5" y="-409" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">our_frame()</text>
</a>
</g>
<g id="a_node4_29"><a xlink:href="StackInspector.ipynb" xlink:title="search_frame(self, name:str, frame:Union[frame, NoneType]=None) &#45;&gt; Tuple[Union[frame, NoneType], Union[Callable, NoneType]]:&#10;Return a pair (`frame`, `item`)&#10;in which the function `name` is defined as `item`.">
<text text-anchor="start" x="26.5" y="-398" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_frame()</text>
</a>
</g>
<g id="a_node4_30"><a xlink:href="StackInspector.ipynb" xlink:title="search_func(self, name:str, frame:Union[frame, NoneType]=None) &#45;&gt; Union[Callable, NoneType]:&#10;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="26.5" y="-387" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_func()</text>
</a>
</g>
<g id="a_node4_31"><a xlink:href="StackInspector.ipynb" xlink:title="unknown(self) &#45;&gt; None">
<text text-anchor="start" x="26.5" y="-376" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">unknown()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;StackInspector -->
<g id="edge3" class="edge">
<title>Tracer&#45;&gt;StackInspector</title>
<path fill="none" stroke="#000000" d="M83.5,-332.5936C83.5,-341.1051 83.5,-350.0343 83.5,-359.0285"/>
<polygon fill="none" stroke="#000000" points="80.0001,-359.192 83.5,-369.1921 87.0001,-359.1921 80.0001,-359.192"/>
</g>
<!-- Legend -->
<g id="node5" class="node">
<title>Legend</title>
<text text-anchor="start" x="158.5" y="-50" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="158.5" y="-40" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="165.5" y="-40" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00" fill="#000000">public_method()</text>
<text text-anchor="start" x="158.5" y="-30" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="165.5" y="-30" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00" fill="#000000">private_method()</text>
<text text-anchor="start" x="158.5" y="-20" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="165.5" y="-20" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00" fill="#000000">overloaded_method()</text>
<text text-anchor="start" x="158.5" y="-10.8" font-family="Helvetica,sans-Serif" font-size="9.00" fill="#000000">Hover over names to see doc</text>
</g>
</g>
</svg>
