<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="455pt" height="827pt"
 viewBox="0.00 0.00 454.50 827.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 823)">
<title>%3</title>
<g id="a_graph0"><a xlink:title="Slicer class hierarchy">
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-823 450.5,-823 450.5,4 -4,4"/>
</a>
</g>
<!-- Slicer -->
<g id="node1" class="node">
<title>Slicer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class Slicer:&#10;Track dependencies in an execution">
<polygon fill="none" stroke="#000000" points="0,-48.5 0,-200.5 101,-200.5 101,-48.5 0,-48.5"/>
<text text-anchor="start" x="31" y="-186.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Slicer</text>
<polyline fill="none" stroke="#000000" points="0,-177.5 101,-177.5 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="Slicer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, *items_to_instrument: Any, dependency_tracker: Optional[__main__.DependencyTracker] = None, globals: Optional[Dict[str, Any]] = None, log: Union[bool, int] = False):&#10;Create a slicer.&#10;`items_to_instrument` are Python functions or modules with source code.&#10;`dependency_tracker` is the tracker to be used (default: DependencyTracker).&#10;`globals` is the namespace to be used(default: caller&#39;s `globals()`)&#10;`log`=True or `log` &gt; 0 turns on logging">
<text text-anchor="start" x="8.5" y="-166" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="_repr_svg_(self) &#45;&gt; Any:&#10;If the object is output in Jupyter, render dependencies as a SVG graph">
<text text-anchor="start" x="8.5" y="-155" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">_repr_svg_()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="code(self, *args: Any, **kwargs: Any) &#45;&gt; None:&#10;Show code of instrumented items, annotated with dependencies.">
<text text-anchor="start" x="8.5" y="-144" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">code()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="dependencies(self) &#45;&gt; __main__.Dependencies:&#10;Return collected dependencies.">
<text text-anchor="start" x="8.5" y="-133" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">dependencies()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="graph(self, *args: Any, **kwargs: Any) &#45;&gt; graphviz.dot.Digraph:&#10;Show dependency graph.">
<text text-anchor="start" x="8.5" y="-122" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">graph()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="execute(self, tree: ast.AST, item: Any) &#45;&gt; None:&#10;Compile and execute `tree`. May be extended in subclasses.">
<text text-anchor="start" x="8.5" y="-111" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">execute()</text>
</a>
</g>
<g id="a_node1_7"><a xlink:href="#" xlink:title="instrument(self, item: Any) &#45;&gt; None:&#10;Instrument `item`, transforming its source code, and re&#45;defining it.">
<text text-anchor="start" x="8.5" y="-100" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">instrument()</text>
</a>
</g>
<g id="a_node1_8"><a xlink:href="#" xlink:title="parse(self, item: Any) &#45;&gt; ast.AST:&#10;Parse `item`, returning its AST">
<text text-anchor="start" x="8.5" y="-88" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">parse()</text>
</a>
</g>
<g id="a_node1_9"><a xlink:href="#" xlink:title="restore(self) &#45;&gt; None:&#10;Restore original code.">
<text text-anchor="start" x="8.5" y="-78" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">restore()</text>
</a>
</g>
<g id="a_node1_10"><a xlink:href="#" xlink:title="transform(self, tree: ast.AST) &#45;&gt; ast.AST:&#10;Apply transformers on `tree`. May be extended in subclasses.">
<text text-anchor="start" x="8.5" y="-67" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">transform()</text>
</a>
</g>
<g id="a_node1_11"><a xlink:href="#" xlink:title="transformers(self) &#45;&gt; List[ast.NodeTransformer]:&#10;List of transformers to apply. To be extended in subclasses.">
<text text-anchor="start" x="8.5" y="-56" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">transformers()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Instrumenter -->
<g id="node2" class="node">
<title>Instrumenter</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class Instrumenter:&#10;Instrument functions for dynamic tracking">
<polygon fill="none" stroke="#000000" points="22.5,-405 22.5,-491 124.5,-491 124.5,-405 22.5,-405"/>
<text text-anchor="start" x="30.5" y="-476.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-style="italic" font-size="14.00" fill="#6a0dad">Instrumenter</text>
<polyline fill="none" stroke="#000000" points="22.5,-468 124.5,-468 "/>
<g id="a_node2_12"><a xlink:href="#" xlink:title="Instrumenter">
<g id="a_node2_13"><a xlink:href="#" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Instrument sources">
<text text-anchor="start" x="37.5" y="-456.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__enter__()</text>
</a>
</g>
<g id="a_node2_14"><a xlink:href="#" xlink:title="__exit__(self, exc_type: Type, exc_value: BaseException, traceback: traceback) &#45;&gt; Optional[bool]:&#10;Restore sources">
<text text-anchor="start" x="37.5" y="-445.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__exit__()</text>
</a>
</g>
<g id="a_node2_15"><a xlink:href="#" xlink:title="__init__(self, *items_to_instrument: Callable, globals: Optional[Dict[str, Any]] = None, log: Union[bool, int] = False) &#45;&gt; None:&#10;Create an instrumenter.&#10;`items_to_instrument` is a list of items to instrument.&#10;`globals` is a namespace to use (default: caller&#39;s globals())">
<text text-anchor="start" x="37.5" y="-434.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node2_16"><a xlink:href="#" xlink:title="instrument(self, item: Any) &#45;&gt; None:&#10;Instrument `item`. To be overloaded in subclasses.">
<text text-anchor="start" x="37.5" y="-423.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">instrument()</text>
</a>
</g>
<g id="a_node2_17"><a xlink:href="#" xlink:title="restore(self) &#45;&gt; None">
<text text-anchor="start" x="37.5" y="-412.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">restore()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Slicer&#45;&gt;Instrumenter -->
<g id="edge1" class="edge">
<title>Slicer&#45;&gt;Instrumenter</title>
<path fill="none" stroke="#000000" d="M55.9216,-200.7553C60.1548,-260.2973 65.9302,-341.5294 69.6869,-394.3677"/>
<polygon fill="none" stroke="#000000" points="66.2098,-394.8154 70.4102,-404.5419 73.1922,-394.3189 66.2098,-394.8154"/>
</g>
<!-- StackInspector -->
<g id="node3" class="node">
<title>StackInspector</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class StackInspector:&#10;Provide functions to inspect the stack">
<polygon fill="none" stroke="#000000" points="143,-647.5 143,-766.5 262,-766.5 262,-647.5 143,-647.5"/>
<text text-anchor="start" x="152" y="-752.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-style="italic" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="#000000" points="143,-743.5 262,-743.5 "/>
<g id="a_node3_18"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node3_19"><a xlink:href="StackInspector.ipynb" xlink:title="_generated_function_cache = {(&#39;&lt;module&gt;&#39;, 2): &lt;function &lt;module&gt; at 0x7f943d4d1158&gt;, (&#39;&lt;module&gt;&#39;, 1): &lt;function &lt;module&gt; at 0x7f943d4d1b70&gt;, (&#39;&lt;module&gt;&#39;, 3): &lt;function &lt;module&gt; at 0x7f943d6fe598&gt;, (&#39;&lt;module&gt;&#39;, 4): &lt;function &lt;module&gt; at 0x7f943d6cf1e0&gt;, (&#39;&lt;listcomp&gt;&#39;, 18): &lt;bound method StackInspector.unknown of &lt;__main__.DependencyTracker object at 0x7f943dc33940&gt;&gt;}">
<text text-anchor="start" x="127.5" y="-783" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_generated_function_cache</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="#000000" points="119,-776.5 286,-776.5 "/>
<g id="a_node3_20"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node3_21"><a xlink:href="StackInspector.ipynb" xlink:title="caller_frame(self) &#45;&gt; frame:&#10;Return the frame of the caller.">
<text text-anchor="start" x="145.5" y="-765" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">caller_frame()</text>
</a>
</g>
<g id="a_node3_22"><a xlink:href="StackInspector.ipynb" xlink:title="caller_function(self) &#45;&gt; Callable:&#10;Return the calling function">
<text text-anchor="start" x="145.5" y="-754" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">caller_function()</text>
</a>
</g>
<g id="a_node3_23"><a xlink:href="StackInspector.ipynb" xlink:title="caller_globals(self) &#45;&gt; Dict[str, Any]:&#10;Return the globals() environment of the caller.">
<text text-anchor="start" x="145.5" y="-743" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">caller_globals()</text>
</a>
</g>
<g id="a_node3_24"><a xlink:href="#" xlink:title="search_frame(self, name: str) &#45;&gt; Tuple[Optional[frame], Optional[Callable]]:&#10;Return a pair (`frame`, `item`)&#10;in which the function named `name` is defined as `item`.">
<text text-anchor="start" x="151.5" y="-677.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">search_frame()</text>
</a>
</g>
<g id="a_node3_25"><a xlink:href="#" xlink:title="search_func(self, name: str) &#45;&gt; Optional[Callable]:&#10;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="151.5" y="-666.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">search_func()</text>
</a>
</g>
<g id="a_node3_26"><a xlink:href="StackInspector.ipynb" xlink:title="search_frame(self, name:str, frame:Union[frame, NoneType]=None) &#45;&gt; Tuple[Union[frame, NoneType], Union[Callable, NoneType]]:&#10;Return a pair (`frame`, `item`)&#10;in which the function `name` is defined as `item`.">
<text text-anchor="start" x="145.5" y="-710" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">search_frame()</text>
</a>
</g>
<g id="a_node3_27"><a xlink:href="StackInspector.ipynb" xlink:title="search_func(self, name:str, frame:Union[frame, NoneType]=None) &#45;&gt; Union[Callable, NoneType]:&#10;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="145.5" y="-699" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">search_func()</text>
</a>
</g>
<g id="a_node3_28"><a xlink:href="StackInspector.ipynb" xlink:title="create_function(self, frame:frame) &#45;&gt; Callable:&#10;Create function for given frame">
<text text-anchor="start" x="145.5" y="-687" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">create_function()</text>
</a>
</g>
<g id="a_node3_29"><a xlink:href="StackInspector.ipynb" xlink:title="is_internal_error(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; bool:&#10;Return True if exception was raised from `StackInspector` or a subclass.">
<text text-anchor="start" x="145.5" y="-676" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">is_internal_error()</text>
</a>
</g>
<g id="a_node3_30"><a xlink:href="StackInspector.ipynb" xlink:title="our_frame(self, frame:frame) &#45;&gt; bool:&#10;Return true if `frame` is in the current (inspecting) class.">
<text text-anchor="start" x="145.5" y="-665" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">our_frame()</text>
</a>
</g>
<g id="a_node3_31"><a xlink:href="StackInspector.ipynb" xlink:title="unknown(self) &#45;&gt; None">
<text text-anchor="start" x="145.5" y="-654" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">unknown()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Instrumenter&#45;&gt;StackInspector -->
<g id="edge2" class="edge">
<title>Instrumenter&#45;&gt;StackInspector</title>
<path fill="none" stroke="#000000" d="M90.5167,-491.2802C104.0361,-524.5536 124.0168,-571.3792 144.5,-611 149.1759,-620.0447 154.3614,-629.3997 159.6533,-638.5608"/>
<polygon fill="none" stroke="#000000" points="156.6763,-640.4035 164.7464,-647.2683 162.7187,-636.8693 156.6763,-640.4035"/>
</g>
<!-- DependencyTracker -->
<g id="node4" class="node">
<title>DependencyTracker</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class DependencyTracker:&#10;Track dependencies during execution">
<polygon fill="none" stroke="#000000" points="119,-.5 119,-248.5 310,-248.5 310,-.5 119,-.5"/>
<text text-anchor="start" x="147.5" y="-234.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">DependencyTracker</text>
<polyline fill="none" stroke="#000000" points="119,-225.5 310,-225.5 "/>
<g id="a_node4_32"><a xlink:href="#" xlink:title="DependencyTracker">
<g id="a_node4_33"><a xlink:href="#" xlink:title="TEST = &#39;&lt;test&gt;&#39;">
<text text-anchor="start" x="202.5" y="-213" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">TEST</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="#000000" points="119,-206.5 310,-206.5 "/>
<g id="a_node4_34"><a xlink:href="#" xlink:title="DependencyTracker">
<g id="a_node4_35"><a xlink:href="#" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Track entering an if/while/for block">
<text text-anchor="start" x="127.5" y="-195.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__enter__()</text>
</a>
</g>
<g id="a_node4_31"><a xlink:href="#" xlink:title="__exit__(self, exc_type: Type, exc_value: BaseException, traceback: traceback) &#45;&gt; Optional[bool]:&#10;Track exiting an if/while/for block">
<text text-anchor="start" x="127.5" y="-184.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__exit__()</text>
</a>
</g>
<g id="a_node4_32"><a xlink:href="#" xlink:title="__init__(self, *args: Any, **kwargs: Any) &#45;&gt; None:&#10;Constructor. Arguments are passed to DataTracker.__init__()">
<text text-anchor="start" x="127.5" y="-173.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node4_33"><a xlink:href="#" xlink:title="arg(self, value: Any, pos: Optional[int] = None, kw: Optional[str] = None) &#45;&gt; Any:&#10;Track passing an argument `value`&#10;(with given position `pos` 1..n or keyword `kw`)">
<text text-anchor="start" x="127.5" y="-162.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">arg()</text>
</a>
</g>
<g id="a_node4_34"><a xlink:href="#" xlink:title="call(self, func: Callable) &#45;&gt; Callable:&#10;Track a call of function `func`">
<text text-anchor="start" x="127.5" y="-151.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">call()</text>
</a>
</g>
<g id="a_node4_35"><a xlink:href="#" xlink:title="get(self, name: str, value: Any) &#45;&gt; Any:&#10;Track a read access for variable `name` with value `value`">
<text text-anchor="start" x="127.5" y="-140.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">get()</text>
</a>
</g>
<g id="a_node4_36"><a xlink:href="#" xlink:title="param(self, name: str, value: Any, pos: Optional[int] = None, vararg: str = &#39;&#39;, last: bool = False) &#45;&gt; Any:&#10;Track getting a parameter `name` with value `value`&#10;(with given position `pos`).&#10;vararg parameters are indicated by setting `varargs` to&#10;&#39;*&#39; (*args) or &#39;**&#39; (**kwargs)">
<text text-anchor="start" x="127.5" y="-129.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">param()</text>
</a>
</g>
<g id="a_node4_37"><a xlink:href="#" xlink:title="ret(self, value: Any) &#45;&gt; Any:&#10;Track a function return">
<text text-anchor="start" x="127.5" y="-118.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">ret()</text>
</a>
</g>
<g id="a_node4_38"><a xlink:href="#" xlink:title="set(self, name: str, value: Any, loads: Optional[Set[str]] = None) &#45;&gt; Any:&#10;Add a dependency for `name` = `value`">
<text text-anchor="start" x="127.5" y="-107.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">set()</text>
</a>
</g>
<g id="a_node4_39"><a xlink:href="#" xlink:title="test(self, value: Any) &#45;&gt; Any:&#10;Track a test for condition `value`">
<text text-anchor="start" x="127.5" y="-96.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">test()</text>
</a>
</g>
<g id="a_node4_40"><a xlink:href="#" xlink:title="call_generator(self, func: Callable) &#45;&gt; Callable:&#10;Track a call of a generator function">
<text text-anchor="start" x="127.5" y="-84.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">call_generator()</text>
</a>
</g>
<g id="a_node4_46"><a xlink:href="#" xlink:title="check_location(self) &#45;&gt; None:&#10;If we are in a new location, clear set of read variables">
<text text-anchor="start" x="127.5" y="-73.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">check_location()</text>
</a>
</g>
<g id="a_node4_47"><a xlink:href="#" xlink:title="clear_read(self) &#45;&gt; None:&#10;Clear set of read variables">
<text text-anchor="start" x="127.5" y="-62.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">clear_read()</text>
</a>
</g>
<g id="a_node4_48"><a xlink:href="#" xlink:title="dependencies(self) &#45;&gt; __main__.Dependencies:&#10;Return dependencies">
<text text-anchor="start" x="127.5" y="-51.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">dependencies()</text>
</a>
</g>
<g id="a_node4_49"><a xlink:href="#" xlink:title="ignore_location_change(self) &#45;&gt; None">
<text text-anchor="start" x="127.5" y="-40.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">ignore_location_change()</text>
</a>
</g>
<g id="a_node4_50"><a xlink:href="#" xlink:title="ignore_next_location_change(self) &#45;&gt; None">
<text text-anchor="start" x="127.5" y="-29.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">ignore_next_location_change()</text>
</a>
</g>
<g id="a_node4_51"><a xlink:href="#" xlink:title="in_generator(self) &#45;&gt; bool:&#10;True if we are calling a generator function">
<text text-anchor="start" x="127.5" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">in_generator()</text>
</a>
</g>
<g id="a_node4_47"><a xlink:href="#" xlink:title="ret_generator(self, generator: Any) &#45;&gt; Any:&#10;Track the return of a generator function">
<text text-anchor="start" x="127.5" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">ret_generator()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- DataTracker -->
<g id="node5" class="node">
<title>DataTracker</title>
<g id="a_node5"><a xlink:href="#" xlink:title="class DataTracker:&#10;Track data accesses during execution">
<polygon fill="none" stroke="#000000" points="154,-372 154,-524 251,-524 251,-372 154,-372"/>
<text text-anchor="start" x="162" y="-509.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">DataTracker</text>
<polyline fill="none" stroke="#000000" points="154,-501 251,-501 "/>
<g id="a_node5_48"><a xlink:href="#" xlink:title="DataTracker">
<g id="a_node5_49"><a xlink:href="#" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Enter `with` block. To be overloaded in subclasses.">
<text text-anchor="start" x="169.5" y="-489.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__enter__()</text>
</a>
</g>
<g id="a_node5_50"><a xlink:href="#" xlink:title="__exit__(self, exc_type: Type, exc_value: BaseException, traceback: traceback) &#45;&gt; Optional[bool]:&#10;Exit `with` block. To be overloaded in subclasses.">
<text text-anchor="start" x="169.5" y="-478.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__exit__()</text>
</a>
</g>
<g id="a_node5_51"><a xlink:href="#" xlink:title="__init__(self, log: bool = False) &#45;&gt; None:&#10;Constructor. If `log` is set, turn on logging.">
<text text-anchor="start" x="169.5" y="-467.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node5_52"><a xlink:href="#" xlink:title="arg(self, value: Any, pos: Optional[int] = None, kw: Optional[str] = None) &#45;&gt; Any:&#10;Track `value` being passed as argument.&#10;`pos` (if given) is the argument position (starting with 1).&#10;`kw` (if given) is the argument keyword.">
<text text-anchor="start" x="169.5" y="-456.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">arg()</text>
</a>
</g>
<g id="a_node5_53"><a xlink:href="#" xlink:title="augment(self, name: str, value: Any) &#45;&gt; Any:&#10;Track augmenting `name` with `value`.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="169.5" y="-445.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">augment()</text>
</a>
</g>
<g id="a_node5_54"><a xlink:href="#" xlink:title="call(self, func: Callable) &#45;&gt; Callable:&#10;Track a call to `func`.">
<text text-anchor="start" x="169.5" y="-434.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">call()</text>
</a>
</g>
<g id="a_node5_55"><a xlink:href="#" xlink:title="get(self, name: str, value: Any) &#45;&gt; Any:&#10;Track getting `value` from `name`.">
<text text-anchor="start" x="169.5" y="-423.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">get()</text>
</a>
</g>
<g id="a_node5_56"><a xlink:href="#" xlink:title="param(self, name: str, value: Any, pos: Optional[int] = None, vararg: str = &#39;&#39;, last: bool = False) &#45;&gt; Any:&#10;At the beginning of a function, track parameter `name` being set to `value`.&#10;`pos` is the position of the argument (starting with 1).&#10;`vararg` is &quot;*&quot; if `name` is a vararg parameter (as in *args),&#10;and &quot;**&quot; is `name` is a kwargs parameter (as in *kwargs).&#10;`last` is True if `name` is the last parameter.">
<text text-anchor="start" x="169.5" y="-412.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">param()</text>
</a>
</g>
<g id="a_node5_57"><a xlink:href="#" xlink:title="ret(self, value: Any) &#45;&gt; Any:&#10;Track `value` being used as return value.">
<text text-anchor="start" x="169.5" y="-401.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">ret()</text>
</a>
</g>
<g id="a_node5_58"><a xlink:href="#" xlink:title="set(self, name: str, value: Any, loads: Optional[Set[str]] = None) &#45;&gt; Any:&#10;Track setting `name` to `value`.">
<text text-anchor="start" x="169.5" y="-390.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">set()</text>
</a>
</g>
<g id="a_node5_59"><a xlink:href="#" xlink:title="test(self, cond: ast.AST) &#45;&gt; ast.AST:&#10;Test condition `cond`. To be overloaded in subclasses.">
<text text-anchor="start" x="169.5" y="-379.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">test()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- DependencyTracker&#45;&gt;DataTracker -->
<g id="edge3" class="edge">
<title>DependencyTracker&#45;&gt;DataTracker</title>
<path fill="none" stroke="#000000" d="M209.8948,-248.6484C208.4932,-286.4346 206.984,-327.1191 205.6968,-361.8186"/>
<polygon fill="none" stroke="#000000" points="202.1957,-361.788 205.3225,-371.9109 209.1908,-362.0475 202.1957,-361.788"/>
</g>
<!-- DataTracker&#45;&gt;StackInspector -->
<g id="edge4" class="edge">
<title>DataTracker&#45;&gt;StackInspector</title>
<path fill="none" stroke="#000000" d="M202.5,-524.0004C202.5,-558.7427 202.5,-600.2831 202.5,-637.1436"/>
<polygon fill="none" stroke="#000000" points="199.0001,-637.4064 202.5,-647.4065 206.0001,-637.4065 199.0001,-637.4064"/>
</g>
<!-- Dependencies -->
<g id="node6" class="node">
<title>Dependencies</title>
<g id="a_node6"><a xlink:href="#" xlink:title="class Dependencies:&#10;A dependency graph">
<polygon fill="none" stroke="#000000" points="269,-285.5 269,-610.5 400,-610.5 400,-285.5 269,-285.5"/>
<text text-anchor="start" x="287" y="-596.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Dependencies</text>
<polyline fill="none" stroke="#000000" points="269,-587.5 400,-587.5 "/>
<g id="a_node6_60"><a xlink:href="#" xlink:title="Dependencies">
<g id="a_node6_61"><a xlink:href="#" xlink:title="FONT_NAME = &#39;Fira Mono, Courier, monospace&#39;">
<text text-anchor="start" x="304.5" y="-575.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">FONT_NAME</text>
</a>
</g>
<g id="a_node6_62"><a xlink:href="#" xlink:title="NODE_COLOR = &#39;peachpuff&#39;">
<text text-anchor="start" x="304.5" y="-564.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">NODE_COLOR</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="#000000" points="269,-557.5 400,-557.5 "/>
<g id="a_node6_63"><a xlink:href="#" xlink:title="Dependencies">
<g id="a_node6_64"><a xlink:href="#" xlink:title="__init__(self, data: Optional[Dict[Tuple[str, Tuple[Callable, int]], Set[Tuple[str, Tuple[Callable, int]]]]] = None, control: Optional[Dict[Tuple[str, Tuple[Callable, int]], Set[Tuple[str, Tuple[Callable, int]]]]] = None) &#45;&gt; None:&#10;Create a dependency graph from `data` and `control`.&#10;Both `data` and `control` are dictionaries&#10;holding _nodes_ as keys and sets of nodes as values.&#10;Each node comes as a tuple (variable_name, location)&#10;where `variable_name` is a string&#10;and `location` is a pair (function, lineno)&#10;where `function` is a callable and `lineno` is a line number&#10;denoting a unique location in the code.">
<text text-anchor="start" x="277.5" y="-546.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node6_65"><a xlink:href="#" xlink:title="__repr__(self) &#45;&gt; str:&#10;Represent dependencies as a Python expression">
<text text-anchor="start" x="277.5" y="-535.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__repr__()</text>
</a>
</g>
<g id="a_node6_66"><a xlink:href="#" xlink:title="__str__(self) &#45;&gt; str:&#10;Return string representation of dependencies">
<text text-anchor="start" x="277.5" y="-524.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__str__()</text>
</a>
</g>
<g id="a_node6_67"><a xlink:href="#" xlink:title="_repr_svg_(self) &#45;&gt; Any:&#10;If the object is output in Jupyter, render dependencies as a SVG graph">
<text text-anchor="start" x="277.5" y="-513.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">_repr_svg_()</text>
</a>
</g>
<g id="a_node6_68"><a xlink:href="#" xlink:title="all_functions(self) &#45;&gt; Dict[Callable, List[Tuple[int, Tuple[str, Tuple[Callable, int]]]]]:&#10;Return mapping {`function`: [(`lineno`, `var`), (`lineno`, `var`), ...], ...}&#10;for all functions in the dependencies.">
<text text-anchor="start" x="277.5" y="-502.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">all_functions()</text>
</a>
</g>
<g id="a_node6_69"><a xlink:href="#" xlink:title="all_vars(self) &#45;&gt; Set[Tuple[str, Tuple[Callable, int]]]:&#10;Return a set of all variables (as `var_name`, `location`) in the dependencies">
<text text-anchor="start" x="277.5" y="-491.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">all_vars()</text>
</a>
</g>
<g id="a_node6_70"><a xlink:href="#" xlink:title="backward_slice(self, *criteria: Union[str, Tuple[Callable, int], Tuple[str, Tuple[Callable, int]]], mode: str = &#39;cd&#39;, depth: int = &#45;1) &#45;&gt; __main__.Dependencies:&#10;Create a backward slice from nodes `criteria`.&#10;`mode` can contain &#39;c&#39; (draw control dependencies)&#10;and &#39;d&#39; (draw data dependencies) (default: &#39;cd&#39;)">
<text text-anchor="start" x="277.5" y="-480.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">backward_slice()</text>
</a>
</g>
<g id="a_node6_71"><a xlink:href="#" xlink:title="code(self, *items: Callable, mode: str = &#39;cd&#39;) &#45;&gt; None:&#10;List `items` on standard output, including dependencies as comments.&#10;If `items` is empty, all included functions are listed.&#10;`mode` can contain &#39;c&#39; (draw control dependencies) and &#39;d&#39; (draw data dependencies)&#10;(default: &#39;cd&#39;).">
<text text-anchor="start" x="277.5" y="-469.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">code()</text>
</a>
</g>
<g id="a_node6_72"><a xlink:href="#" xlink:title="graph(self) &#45;&gt; graphviz.dot.Digraph:&#10;Draw dependencies.">
<text text-anchor="start" x="277.5" y="-458.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">graph()</text>
</a>
</g>
<g id="a_node6_73"><a xlink:href="#" xlink:title="_code(self, item: Callable, mode: str) &#45;&gt; None">
<text text-anchor="start" x="277.5" y="-446.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_code()</text>
</a>
</g>
<g id="a_node6_74"><a xlink:href="#" xlink:title="_source(self, node: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str">
<text text-anchor="start" x="277.5" y="-435.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_source()</text>
</a>
</g>
<g id="a_node6_75"><a xlink:href="#" xlink:title="add_hierarchy(self, g: graphviz.dot.Digraph) &#45;&gt; graphviz.dot.Digraph:&#10;Add invisible edges for a proper hierarchy.">
<text text-anchor="start" x="277.5" y="-424.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">add_hierarchy()</text>
</a>
</g>
<g id="a_node6_76"><a xlink:href="#" xlink:title="draw_dependencies(self, g: graphviz.dot.Digraph) &#45;&gt; None">
<text text-anchor="start" x="277.5" y="-413.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">draw_dependencies()</text>
</a>
</g>
<g id="a_node6_77"><a xlink:href="#" xlink:title="expand_criteria(self, criteria: List[Union[str, Tuple[Callable, int], Tuple[str, Tuple[Callable, int]]]]) &#45;&gt; List[Tuple[str, Tuple[Callable, int]]]:&#10;Return list of vars matched by `criteria`.">
<text text-anchor="start" x="277.5" y="-402.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">expand_criteria()</text>
</a>
</g>
<g id="a_node6_78"><a xlink:href="#" xlink:title="format_var(self, var: Tuple[str, Tuple[Callable, int]], current_func: Optional[Callable] = None) &#45;&gt; str:&#10;Return string for `var` in `current_func`.">
<text text-anchor="start" x="277.5" y="-391.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">format_var()</text>
</a>
</g>
<g id="a_node6_79"><a xlink:href="#" xlink:title="id(self, var: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str:&#10;Return a unique ID for `var`.">
<text text-anchor="start" x="277.5" y="-380.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">id()</text>
</a>
</g>
<g id="a_node6_80"><a xlink:href="#" xlink:title="label(self, var: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str:&#10;Render node `var` using HTML style.">
<text text-anchor="start" x="277.5" y="-369.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">label()</text>
</a>
</g>
<g id="a_node6_81"><a xlink:href="#" xlink:title="make_graph(self, name: str = &#39;dependencies&#39;, comment: str = &#39;Dependencies&#39;) &#45;&gt; graphviz.dot.Digraph">
<text text-anchor="start" x="277.5" y="-358.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">make_graph()</text>
</a>
</g>
<g id="a_node6_82"><a xlink:href="#" xlink:title="repr_dependencies(self, vars: Dict[Tuple[str, Tuple[Callable, int]], Set[Tuple[str, Tuple[Callable, int]]]]) &#45;&gt; str">
<text text-anchor="start" x="277.5" y="-347.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">repr_dependencies()</text>
</a>
</g>
<g id="a_node6_83"><a xlink:href="#" xlink:title="repr_deps(self, var_set: Set[Tuple[str, Tuple[Callable, int]]]) &#45;&gt; str">
<text text-anchor="start" x="277.5" y="-336.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">repr_deps()</text>
</a>
</g>
<g id="a_node6_84"><a xlink:href="#" xlink:title="repr_var(self, var: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str">
<text text-anchor="start" x="277.5" y="-325.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">repr_var()</text>
</a>
</g>
<g id="a_node6_85"><a xlink:href="#" xlink:title="source(self, node: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str:&#10;Return the source code for a given node.">
<text text-anchor="start" x="277.5" y="-314.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">source()</text>
</a>
</g>
<g id="a_node6_86"><a xlink:href="#" xlink:title="tooltip(self, var: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str:&#10;Return a tooltip for node `var`.">
<text text-anchor="start" x="277.5" y="-303.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">tooltip()</text>
</a>
</g>
<g id="a_node6_87"><a xlink:href="#" xlink:title="validate(self) &#45;&gt; None:&#10;Perform a simple syntactic validation of dependencies">
<text text-anchor="start" x="277.5" y="-292.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">validate()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Dependencies&#45;&gt;StackInspector -->
<g id="edge5" class="edge">
<title>Dependencies&#45;&gt;StackInspector</title>
<path fill="none" stroke="#000000" d="M268.8359,-592.8178C265.7333,-598.9871 262.6136,-605.0704 259.5,-611 254.7539,-620.0384 249.5481,-629.4211 244.2726,-638.6239"/>
<polygon fill="none" stroke="#000000" points="241.1876,-636.9671 239.206,-647.375 247.2455,-640.4745 241.1876,-636.9671"/>
</g>
<!-- Legend -->
<g id="node7" class="node">
<title>Legend</title>
<text text-anchor="start" x="328.5" y="-142" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="328.5" y="-132" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="335.5" y="-132" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00" fill="#000000">public_method()</text>
<text text-anchor="start" x="328.5" y="-122" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="335.5" y="-122" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00" fill="#000000">private_method()</text>
<text text-anchor="start" x="328.5" y="-112" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="335.5" y="-112" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00" fill="#000000">overloaded_method()</text>
<text text-anchor="start" x="328.5" y="-102.8" font-family="Helvetica,sans-Serif" font-size="9.00" fill="#000000">Hover over names to see doc</text>
</g>
</g>
</svg>
